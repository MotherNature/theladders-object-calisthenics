job.displayOn(aDisplayer)

def displayOn(aDisplayer)
  aDisplay.display(name: @name, post_date: @date)
end

Don't mix exception-throwing with failure value returning. Check out the "Conditions" system in Common Lisp (and Ruby implementations) as an alternative to exceptions.

Joydip's interesting setup: recruiter = Recruiter.named(name)
Could be stacked for immutable initialization:
  recruiter = Recruiter.named(name)
  recruiter = recruiter.hired_by(company)
  recruiter = recruiter.paid_as(pay_scheme)

TODO: Replace specific-string tests with ones that check the calls to mock TestReport classes.
TODO: Refactor reporting classes to use an ::upon_receiving method instead of an implicit interface.
TODO: Refactor tests to use spies instead of checking for specific strings.
TODO: Start separate, filter-focused spec.
TODO: Create a new class that just holds the specific info of a job tied to a jobseeker and a date.
TODO: Move the populating of a Report's instance data from #to_string to the initialization, as all of the #to_* methods will need things initialized.
TODO: Even better, have HTMLJobListReport generator, etc., which could subclass or take a JobListReport.
TODO: Move setup code _below_ the actual tests.
TODO: Add "before change" state tests, to make sure that there wasn't anything added or removed unexpectedly first.

TODO: Ooooh: reporting and filtering should barely touch at all, mostly certainly not within classes themselves.
  Could have a ::when_filtering_on method to set #passes_thru? or something.

TODO: Rename JobseekerAndJobsReport into SubmissionReport, same for corresponding List.
  ALSO: Take the corresponding element instead of a list of jobseekers.

TODO: Push fix for typo on "Rule 1" of OC README.

TODO: Rename #to_string methods to #render, possibly giving them an object parameter to which they would render (latter's probably overkill for a model exercise).

TODO: "Application" instead of "Submission". Maintain parity with the ubiquitous domain language.

TODO: More "as an X" framing of requirements. Extract implicit roles from those.
  Make sure that your verbs follow that pattern. _Active_ verbs, _not_ passive ones.

TODO: "TheLadders" will be an actor, too, so go ahead and have a class for it. (Per Joydip's example.)

employer = employer.new(name: "X")

role = JobPoster.new(post_to: posting_repo)

posting_employer = employer.with_role(role)

posting_employer.post_job(job)
posting_employer.posted_job?(job) # Totally okay!

TODO: Consider having, for example, Job provide a ReportableJob, which is just a data-bag. Reports can then #get from that without issue, as a ReportableJob is responsible for nothing but providing data.
Example:

reportable_job = job.as_reportable

def job_report.report_on(reportable_job)
  "Title: #{reportable_job.title}"
end

job_report.report_on(reportable_job)

Alternately, go back to Displayable instead of Reportable.
